{"version":3,"sources":["app.js"],"names":["pagina","cita","nombre","fecha","hora","servicios","iniciarApp","mosntrarServicios","mostrarSeccion","cambiarSeccion","paginaSiguiente","paginaAnterior","botonesPaginador","mostrarResumen","nombreCita","fechaCita","deshabilitarFechaAnterior","horaCita","seccionAnterior","document","querySelector","classList","remove","add","tabAnterior","querySelectorAll","forEach","enlace","addEventListener","e","preventDefault","parseInt","target","dataset","paso","async","resultado","fetch","db","json","servicio","id","precio","nombreServicio","createElement","textContent","precioServicio","servicioDiv","idServicio","onclick","seleccionarServicio","appendChild","error","console","log","elemento","tagName","parentElement","contains","eliminarServicio","agregarServicio","firstElementChild","nextElementSibling","filter","servicioObj","resumenDiv","firstChild","removeChild","Object","values","includes","noServicios","headingCita","innerHTML","serviciosCita","headingServicios","cantidad","contenedorServicio","textoServicio","totalServicio","split","trim","cantidadPagar","nombreTexto","value","length","mostrarAlerta","alerta","mensaje","tipo","setTimeout","fechaInput","dia","Date","getUTCDay","inputFecha","fechaAhora","year","getFullYear","mes","getMonth","fechaDeshabilitar","getDate","min","inputHora"],"mappings":"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","file":"bundle.js","sourcesContent":["// creamos una variable global para que este disponible en todas las funciones\r\nlet pagina = 1;\r\n\r\n\r\n// creamos la constante para las citas y empezar a hacer validaciones\r\n\r\nconst cita = {\r\n    nombre: '',\r\n    fecha: '',\r\n    hora: '',\r\n    servicios: [] // este es un arreglo por que son varios servicios\r\n}\r\n// creamos estas variables de forma gloval para usarlas en todas las funciones\r\n\r\n\r\n// esto es para escuchar a todo el DOM\r\n// para no cargar esto se puede mandar a llamar funciones por medio de otras funciones que esten enlazadas\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    iniciarApp(); // declaramos la funcion\r\n    \r\n});\r\n\r\n// especificamos la funcion \r\nfunction iniciarApp() {\r\n    mosntrarServicios();\r\n    // resalta el div actual segun el tab al que se preciona\r\n    mostrarSeccion();\r\n    // Oculta o muestra una seccion segun el tag al que se preciona\r\n    cambiarSeccion(); // llamamos la funcion\r\n    // llamando la funcion de \"paginacion\" --siguiente y anterior--\r\n    paginaSiguiente();\r\n    paginaAnterior();\r\n    //comprueba la pagina actual para ocultar o mostrar la paginacion\r\n    // definimos una funcion para que navege solamente de la pagina 1 a la 3 si pasarse\r\n    botonesPaginador();\r\n    // Muestra el resumen de la cita (o mensaje de error en caso de no pasar la validacion )\r\n    mostrarResumen();\r\n    // Almacena el nombre de la cita en el objeto\r\n    nombreCita();\r\n    // almacena la fecha de la cita en el objeto\r\n    fechaCita();\r\n    // deshabilita dias pasados\r\n    deshabilitarFechaAnterior();\r\n\r\n    // validar horas\r\n    // almacena la hora de la cita en el objeto\r\n    horaCita();\r\n}\r\n\r\n// resalta el div actual segun el tab al que se preciona\r\n\r\nfunction mostrarSeccion() {\r\n\r\n    //-------eliminar mostrar-seccion de la seccion anterior-------\r\n    // en resumen, a entrar a la app muestra la primera seccion que esta definida arriba, luego para cambiar de seccion al dar click en otra seccion, busca la seccion anterior y le remueve la clase y se la adiciona a la seccion donde le estas dando click, qeu esta definida en lo siguiente\r\n    const seccionAnterior = document.querySelector('.mostrar-seccion');\r\n    if( seccionAnterior ) { // si existe la seccionAnterior entonces quitale la clase\r\n        seccionAnterior.classList.remove('mostrar-seccion');\r\n    }\r\n\r\n    const seccionActual = document.querySelector(`#paso-${pagina}`);\r\n    seccionActual.classList.add('mostrar-seccion');\r\n    \r\n    const tabAnterior =  document.querySelector('.tabs .actual');\r\n    if( tabAnterior ) {\r\n        tabAnterior.classList.remove('actual'); // si existe el tabAnterior entonces elimina la clase \"actual\"\r\n    }\r\n\r\n    //----- Eliminar la clase de \"actual\" en el tab anterior\r\n   \r\n\r\n\r\n    // ----RESALTAR EL TABS ACTUAL----\r\n    const tab = document.querySelector(`[data-paso=\"${pagina}\"]`) // seleccionar el boton donde se esta haciendo click con el atributo, se usa corchete por que es un atributo que se le esta dando no un ID\r\n    tab.classList.add('actual'); // le agregamos la clase para darle estilos en _tabs.scss\r\n}\r\n\r\n// Oculta o muestra una seccion segun el tag al que se preciona\r\n\r\nfunction cambiarSeccion() {\r\n    const enlaces = document.querySelectorAll('.tabs button');\r\n\r\n    // tenemos que agregarle un addeventlistener pero eso es sobre un elemento, y tenemos 3 elementos.\r\n    // entonces tenemos que recorrer cada uno de los elementos primero y luego aplicarle a cada elemento\r\n    enlaces.forEach( (enlace) => {\r\n        enlace.addEventListener('click', (e) => { // recorremos cada elemento y le agregamos un addeventlistener que va a funcionar a travez de un click al evento que queremos escuchar\r\n            e.preventDefault(); //Cancela el evento si este es cancelable, sin detener el resto del funcionamiento del evento, es decir, puede ser llamado de nuevo.\r\n       \r\n            // se le coloca pagina por que asi se llama la variable  let que definimos\r\n            pagina = parseInt(e.target.dataset.paso);  // esto es para el numero que sale como un string pasarlo a numero ya que la variable let que definimos es un numero\r\n            // console.log(e.target.dataset.paso); // paso es por que asi se nombro el boton en el index \r\n            \r\n            // llamar la funcion de \"mostrarSeccion\" en los tabs para que haga la misma funcion cuando se precione cada tabs\r\n\r\n            mostrarSeccion();\r\n\r\n\r\n            // tenemos que llamar aqui tambien a \"botonesPaginador\" debido a que cuando se cambia la pagina por los tab los bonotes no funcionan como deberian\r\n            botonesPaginador();\r\n        })\r\n    })\r\n}\r\n\r\n// consultar base de datos\r\n// untilizamos \"try catch\" debido a que es una buena parte para utilizarlo  por que es una consulta a una base de datos en donde puede fallar el servidor\r\n// ya que se utiliza cuando haya una parte critica en la app por si falla esa parte  el resto de la app sigue funcionando\r\n// solo la parte donde cause el error no funciona pero el resto si.\r\n// primero hacemos esta funcion asincrona para usar el \"fetch api\" para que sea mas corto por que tambien se puede con promises\r\nasync function mosntrarServicios() {\r\n    try {                        //fetch es una api que te permite indagar y buscar cualquier documento en tu proyecto y mostrarlo en consola, es como que llamar cualquier informacion que quieras llamar\r\n        const resultado = await fetch('./servicios.json'); // fetch es parte de JS no se necesita importar nada\r\n        \r\n        const db = await resultado.json();\r\n\r\n        // const servicios = db.servicios; // db es el resultado pero arroja un elemento llamado servicios (servicios.json) que contiene los servicios, entonces colocamos db.servicios para acceder a cada uno de los servicios \r\n       \r\n        const {servicios} = db; // esta es una manera mas corta y es desectrctuirando y asignandolo de una vez en una variable, se extrae ese elemento de DB y se asigna la variable al tiempo\r\n       \r\n        //---GENERAR EL HTML----\r\n        // foreach es para ir interanto entre cada uno de ellos. donde va iterando cada elemento en la variable de \"servicio\"\r\n        servicios.forEach( (servicio) => { // asi accedemos a cada uno de ellos y se llamarian servicio\r\n            const { id, nombre, precio } = servicio; // extraemos de cada servicio el id, nombre, precio y todo se lo asignamos a la variable de \"servicio\"\r\n            \r\n            //recuerda que gracias al foreach estamos recorriendo TODOS los elementos\r\n            //DOM SCRIPTING\r\n            // vamos a sacar el servicios.json y lo vamos a mostrar en pantalla (HTML) con JS\r\n            //---- Generar nombre de servicio\r\n            const nombreServicio = document.createElement('P'); //creamos el primer elemento que es un parrafo\r\n            nombreServicio.textContent = nombre;  // le añadimos al parrafo el nombre de el servicio   \r\n            nombreServicio.classList.add('nombre-servicio');\r\n\r\n            //--- Generar precio de el servicio\r\n\r\n            const precioServicio = document.createElement('P'); // creamos el elemento que en este caso es un P\r\n            precioServicio.textContent = `$ ${precio}`; // debido a que en el diseño tiene un signo de dolar\r\n            precioServicio.classList.add('precio-servicio');\r\n\r\n            //--- Generar DIV contenedor de CADA servicio\r\n\r\n            const servicioDiv = document.createElement('DIV'); // creamos el elemento que es un div en este caso\r\n            servicioDiv.classList.add('servicio'); // le damos una clase para darle estilos\r\n            servicioDiv.dataset.idServicio = id; // le estamos agregando tambien qel id que estamos extrayendo a cada servicio\r\n\r\n            // --- Selecciona un servicio para la cita\r\n\r\n            servicioDiv.onclick = seleccionarServicio;\r\n\r\n\r\n            //-- Inyectar precio y nombre al div de servicio\r\n\r\n            servicioDiv.appendChild(nombreServicio);   //appenChild es para agregarle un hijo a este div\r\n            servicioDiv.appendChild(precioServicio); \r\n\r\n\r\n            // -- Inyectarlo en el HTML\r\n            // selecciono el ID ya definido en el html y el servicioDiv se le agrega como hijo a todo ese ID que esta definido para que se muestre en pantalla\r\n            document.querySelector('#servicios').appendChild(servicioDiv);\r\n\r\n            // console.log(servicioDiv)\r\n\r\n            // TODO ESTO SE ESTA GENERANDO A CADA SERVICIO DEVIDO AL FOREACH de manera como un ciclo\r\n        } );\r\n    \r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n// creamos la funcion de SELECCIONAR SERVICIOS seleccionarServicios que estamos definiendo arriba\r\n\r\nfunction seleccionarServicio(e) {\r\n    // console.log(e.target.tagName); // esto es para saber a que le estamos dando click en consola\r\n\r\n    let elemento;\r\n\r\n    // FORZAR QUE E ELEMENTO AL CUAL LE DAMOS CLICK SEA EL DIV\r\n\r\n    if(e.target.tagName === 'P' ) {\r\n\r\n        // console.log(e.target.parentElement); // esto lo que hace es mandar a la consola el div completo con el id definido\r\n        elemento = e.target.parentElement; // si doy click en el parrafo entonces forza a JS para que vaya hacia el padre que seria el div y ese ya contiene el ID\r\n\r\n\r\n    } else {\r\n        elemento = e.target; // pero si doy click en el div no es necesario ir a elemento padre por que ya contiene el id\r\n    }\r\n    // en ambos casos te lleva al id\r\n\r\n    // console.log(elemento.dataset.idServicio); // aqui vemos que donde uno haga click te lleva al id\r\n\r\n\r\n    // -----para seleccionar y deseleccionar cada servicio-----\r\n    // el contains es para saber si un elemento contiene una clase por ejemplo\r\n    // si el div tiene la clase seleccionada al dar click se le quita, si no la tiene seleccionada al darle click se le coloca\r\n    if(elemento.classList.contains('seleccionado')) {\r\n        elemento.classList.remove('seleccionado');\r\n\r\n        //vamos a eliminar el servicio completo\r\n\r\n        // console.log(elemento.dataset.idServicio) // si te fijas.. al desemarcar el elemento\"servicio\" te arroja el id entonces esto nos sirve para eliminarlo por el id\r\n        const id = parseInt( elemento.dataset.idServicio );\r\n\r\n\r\n        eliminarServicio(id); \r\n    } else {\r\n        elemento.classList.add('seleccionado');\r\n        \r\n        // console.log(elemento.dataset.idServicio); // esto es para conocer cual es el id de \"elemento\"\r\n        // console.log(elemento.firstElementChild.textContent); // para seleccionar el primero hijo de ese elemento y leer lo que esta adentro que es el nombre\r\n        // console.log(elemento.firstElementChild.nextElementSibling.textContent); // para seleccionar el siguiente elemento que esten en el mismo nivel y en este caso poder leer el precio\r\n        \r\n        const servicioObj = {\r\n            id: parseInt( elemento.dataset.idServicio ), // para cambiarlo de string a numero\r\n            nombre: elemento.firstElementChild.textContent,\r\n            precio: elemento.firstElementChild.nextElementSibling.textContent\r\n        }\r\n\r\n        // console.log(servicioObj)\r\n\r\n\r\n        agregarServicio(servicioObj);\r\n        // pero aqui no sale servicios entonces vamos a la funcion de agergarServicio\r\n    }\r\n\r\n};\r\n//funcion para alimnar servicio (iria como enlazado a el resumen) // le agregamos el id que definimos en las const = id \r\nfunction eliminarServicio(id) {\r\n    // console.log('eliminando...', id)\r\n\r\n    const { servicios } = cita // extraemos los servicios de la \"cita\"\r\n    // filter es filtrar cada servicio y se le asigna a el servicio nuevo que estamos definiendo con filter, el filter itera en cada servicio y vamos a decirle que nos traiga todos los servicios cuyos id sean diferentes al que estoy eliminando\r\n    cita.servicios = servicios.filter( servicio => servicio.id !== id );\r\n\r\n    console.log(cita)\r\n\r\n}\r\n//funcion para agregar servicio (iria como enlazado a el resumen)\r\nfunction agregarServicio(servicioObj) {\r\n    const { servicios } = cita;\r\n    // esto es para agregarle los servicios de la cita que ya definimos como constante en un objeto, y lo agregamos al servicioObj\r\n    cita.servicios = [...servicios, servicioObj] // esa sintaxis de 3 puntos es copiar ese objeto o arreglo de servicios y luego dice que le agregue e \"servicioObj\"\r\n\r\n    console.log(cita)\r\n\r\n}\r\n//-----------------importante--------\r\n// estas 2 ultimas funciones de eliminar y agregar serivios terminan en conclucion que cuando aprieto un servicio lo agrega completo, si apreto 2 agrega los 2, si apreto 3 los agrega los 3 PEEEEERO al desmarcara uno lo elimina y se trae los otros 2 diferentes que siguen quedando\r\n//-----------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n//---------definiendo las funciones de \"paginacion\" ----------------\r\n\r\nfunction paginaSiguiente() {\r\n    const paginaSiguiente = document.querySelector('#siguiente');\r\n    paginaSiguiente.addEventListener('click', () => { // le agregamos el evento al hacer click, que es que aumente el valor de la variable \"let pagina = 1\" mas 1 y asi cambia a 2\r\n        pagina++;\r\n\r\n \r\n\r\n        botonesPaginador(); // esto se hace para que cuando cambie el valor de la pagina, que vuelva a comprobar los botones del paginador.. cada vez que se incremente\r\n    }) \r\n}\r\n\r\nfunction paginaAnterior() {\r\n    const paginaAnterior = document.querySelector('#anterior');\r\n    paginaAnterior.addEventListener('click', () => { // le agregamos el evento al hacer click, que es que decremente el valor de la variable \"let pagina\" menos 1 y asi si esta en 2 o 3 disminulle al numero anterior\r\n        pagina--;\r\n\r\n\r\n        botonesPaginador();\r\n    }) \r\n}\r\n\r\n\r\n//comprueba la pagina actual para ocultar o mostrar la paginacion\r\n// definimos una funcion para que navege solamente de la pagina 1 a la 3 si pasarse\r\n\r\nfunction botonesPaginador() {\r\n    // seleccionamos los 2 botones\r\n    const paginaSiguiente = document.querySelector('#siguiente');\r\n    const paginaAnterior = document.querySelector('#anterior');\r\n\r\n    if (pagina === 1) {\r\n        paginaAnterior.classList.add('ocultar'); // si la pagina es 1 entonces no mostrar e boton \"anterior\" con una clase llamada ocultar    \r\n\r\n        \r\n        \r\n    } else if (pagina === 3) {\r\n        paginaSiguiente.classList.add('ocultar'); // si estamos en la pagina 3 entonces el boton de siguiente de paginaSiguiente hay que ocultarlo\r\n        paginaAnterior.classList.remove('ocultar');\r\n\r\n        // estamos en la pagina 3, carga el resumen de la cita.\r\n        mostrarResumen(); // hay que volverla a llamar en esta pagina debido a que aqui es donde se muestra el resumen..\r\n\r\n    } else  { // esto es en caso contrario, si no esta en la 1 ni en la 3 es por que esta en la 2\r\n        paginaAnterior.classList.remove('ocultar'); // si estamos en la pagina 2, el boton de pagina anterior tiene que volver asi que le quitamos la clase\r\n        paginaSiguiente.classList.remove('ocultar'); // si estamos en la pagina 2, el boton de paginaSiguiente tienen que mostrarse tambien cuando vuelvan de la pagina 3 a la 2\r\n    } \r\n    // esto cambia los botones depende de la pagina pero no la seccion.. entonces llamaremos aqui la funcion de \"mostrarSeccion\" que esta arriba\r\n\r\n    mostrarSeccion(); // Cambia la seccion que se muestra por la de la pagina\r\n    // pero ahora se agrega, pero no se quita la seccion anterior\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// definimos la funcion de mostrarResumen\r\n\r\nfunction mostrarResumen() {\r\n    \r\n    // Destructuring\r\n    const { nombre, fecha, hora, servicios } = cita;\r\n\r\n    // Seleccionar el resumen\r\n\r\n    const resumenDiv = document.querySelector('.contenido-resumen'); // seleccionamos el resumen con la clase que se le dio en el index\r\n\r\n\r\n    // limpia el HTML de la pagina 3 previo\r\n    // mientras esta condicion se cumpla osea mientras contenido-resumen tenga HTML se cumplira este while se estara ejecutando\r\n    while ( resumenDiv.firstChild ) {\r\n        resumenDiv.removeChild( resumenDiv.firstChild );\r\n    }\r\n\r\n\r\n    console.log('Mostrar Resumen')\r\n    // validacion de objeto\r\n    // aqui veo los valores de el objeto \"cita\"\r\n    if(Object.values(cita).includes('')) { // esto es para ver valor por valor, y si uno esta vacio entonces hacer lo siguiente\r\n        const noServicios = document.createElement('P')\r\n        noServicios.textContent = 'Faltan datos de Servicios, Hora, Fecha o Nombre';\r\n\r\n\r\n        noServicios.classList.add('invalidar-cita'); // le damos estilos en _resumen.scss\r\n\r\n        console.log('mostrar if')\r\n        // agregar a resumenDiv que definimos la constante arriba, le agregamos un hijo\r\n        resumenDiv.appendChild(noServicios);\r\n        // pero no le estamos pasando los valores del objeto que se escribe en la app web. solamente le estamos pasando que no tiene nada y muestre el error.\r\n        return; //para que al ejecutarse este codigo no se ejecute lo siguiente codigo de la funcion\r\n    }\r\n\r\n    //------------MOSTRAR EL RESUMEN-----------------\r\n    const headingCita = document.createElement('H3'); //creamos un texto\r\n    headingCita.textContent ='Resumen de Cita';\r\n\r\n    const nombreCita = document.createElement('P');\r\n    // nombreCita.textContent = `<span>Nombre:</span> ${nombre}`; // esto agrega el span como un texto\r\n    nombreCita.innerHTML = `<span>Nombre:</span> ${nombre}`; // esto si trata las etiquetas html como codigo html\r\n\r\n    \r\n    const fechaCita = document.createElement('P');\r\n    fechaCita.innerHTML = `<span>Fecha:</span> ${fecha}`;\r\n\r\n    const horaCita = document.createElement('P');\r\n    horaCita.innerHTML = `<span>Hora:</span> ${hora}`;\r\n\r\n    // --- iterar sobre el arreglo de servicios (reflejar los servicios en pantalla)\r\n\r\n    const serviciosCita = document.createElement('DIV');\r\n    serviciosCita.classList.add('resumen-servicios');\r\n\r\n    const headingServicios = document.createElement('H3'); //creamos un texto\r\n    headingServicios.textContent ='Resumen de servicios';\r\n\r\n    serviciosCita.appendChild(headingServicios); // se lo agregamos al serviciosCita para que se mustre en pantalla\r\n\r\n    //creamos esta constante para agregarle un hijo  de contenedorServicios que esta definido abajo\r\n\r\n    let cantidad = 0; // aqui definimos esta variable para la sumatoria de el total la cual empieza en 0\r\n\r\n    servicios.forEach( (servicio) => { // usamos el forEach para ir recorriendo cada uno de los servicios y asignarlos por individual a servicio\r\n        \r\n        const { nombre, precio } = servicio // extraemos los valores de el servicio\r\n        \r\n        const contenedorServicio = document.createElement('DIV'); // entonces se crea un div para cada servicio\r\n\r\n        contenedorServicio.classList.add('contenedor-servicio'); // le agregamos una clase para darle estilos\r\n\r\n        const textoServicio = document.createElement('P');\r\n        textoServicio.textContent = nombre; // para mostrar el nombre de el servicio\r\n        const precioServicio = document.createElement('P');\r\n        precioServicio.textContent = precio;\r\n        precioServicio.classList.add('precio');\r\n\r\n\r\n        //definiendo para quitarle el signo de el dolar al precio y asi poder empezar a hacer la funcion para el total\r\n        const totalServicio = precio.split('$'); // esto separa el signo de el dolar con el precio\r\n        // console.log(parseInt(totalServicio[1].trim())); // el trim es para eliminar espacios en blanco, el parseInt es para volverlo numero y que pueda sumar\r\n\r\n        cantidad += parseInt(totalServicio[1].trim());\r\n\r\n\r\n        // console.log(textoServicio)\r\n        // console.log(precioServicio)\r\n\r\n        // COLOCAR TEXTO Y PRECIO EN EL DIV\r\n\r\n        contenedorServicio.appendChild(textoServicio); // se los agregamos como hijos a contenedorServicio\r\n        contenedorServicio.appendChild(precioServicio); // se los agregamos como hijos a contenedorServicio\r\n\r\n\r\n        serviciosCita.appendChild(contenedorServicio); // servicioCita se definio fuera de la funcion para poder agregarselo al resumenDiv que esta por fuera de esta funcion tambien\r\n        // ahora ese contenedorServicio tenemos que agregarlo a un elemento ya existente en el HTML para que se muestre\r\n        // creamos una variable que este por fuera de los servicios\r\n    } );\r\n\r\n    // console.log(cantidad)\r\n    \r\n    resumenDiv.appendChild(headingCita);\r\n    resumenDiv.appendChild(nombreCita);\r\n    resumenDiv.appendChild(fechaCita);\r\n    resumenDiv.appendChild(horaCita);\r\n\r\n    resumenDiv.appendChild(serviciosCita);\r\n\r\n    const cantidadPagar = document.createElement('P');\r\n    cantidadPagar.classList.add('total');\r\n    cantidadPagar.innerHTML = `<span>Total a Pagar: </span> $ ${cantidad}`;\r\n\r\n    resumenDiv.appendChild(cantidadPagar);\r\n}\r\n\r\n\r\nfunction nombreCita() {\r\n    const nombreInput = document.querySelector('#nombre');\r\n\r\n    // ese evento de input es para escuchar todas las veces que se esta escribiendo en un input\r\n    nombreInput.addEventListener('input', (e) => {\r\n\r\n        const nombreTexto = e.target.value.trim(); // el trim elimina que el espacio al inicio y al final para que no coloquen solo espacios\r\n\r\n        // validacion de que nombreTexto debe tener contenido\r\n\r\n        if ( nombreTexto === '' || nombreTexto.length < 3 ) { // recuerda que length es para saber la extencion de una cadena de texto\r\n            mostrarAlerta('nombre no vaido', 'error')\r\n        }else {\r\n            // para eliminar la alerta en caso que este bien el nombre, perimero se selecciona y luego se dice que si existe una alerta entonces eliminala\r\n            const alerta = document.querySelector('.alerta');\r\n            if (alerta) {\r\n                alerta.remove();\r\n            }\r\n\r\n            // en caso que sea un objeto valido\r\n            cita.nombre = nombreTexto\r\n\r\n            console.log(cita)\r\n        }\r\n\r\n\r\n        // console.log(e.target.value) // saber lo que el usuario esta escribiendo\r\n    })\r\n}\r\n\r\n\r\n// creamos una funcion para mostrar una alerta cuando el input no es valido\r\n// la alerta va a tomar un mensaje\r\nfunction mostrarAlerta(mensaje, tipo){\r\n    // console.log('el mensaje es', mensaje)\r\n\r\n    // si hay una alerta previa, entonces no crear otra (esto es para que no se repitan las alertas)\r\n    const alertaPrevia = document.querySelector('.alerta')\r\n    if ( alertaPrevia ) {\r\n        return;  // si existe una alertaPrevia entonces deten la ejecucion de el codigo con el return\r\n    }\r\n\r\n\r\n    const alerta = document.createElement('DIV');\r\n    alerta.textContent = mensaje;\r\n    alerta.classList.add('alerta');\r\n\r\n    if(tipo === 'error') {\r\n        alerta.classList.add('error');\r\n    }\r\n\r\n    // console.log(alerta);\r\n\r\n    //creamos una const alerta y le creamos un div, le decimos que la alerta sera un mensaje, y le agregamos una clase de alerta, pero si es un error le agregamos la clase de error y es para darle estilos\r\n    // le damos estilos en _formulario.scss\r\n\r\n    // insertar en el HTML en donde esta la clase de \"formulario\"\r\n\r\n    const formulario = document.querySelector('.formulario'); // seleccionamos la clase\r\n    formulario.appendChild( alerta ); // le agregamos hijo de alerta que se esta creandoa ese formulario\r\n    // pero aparece en pantalla repedidas veces\r\n\r\n\r\n\r\n    //---- eliminar alerta despues de 3sg\r\n    setTimeout(() => {\r\n        alerta.remove();    \r\n    }, 3000);\r\n\r\n}\r\n\r\n\r\n\r\n// vamos con la FECHA\r\n\r\nfunction fechaCita() {\r\n    const fechaInput = document.querySelector('#fecha'); // seleccionamos la fecha con el id de fecha establecido en el index\r\n    fechaInput.addEventListener('input', (e)=>{  // input es para escuchar cada inf. que ocura en el campo input\r\n        // console.log(e.target.value) // acceder al valor exacto de el evento de la fechaInput\r\n        // pero lo arroja como un estring entonces lo tenemos que cambiar:\r\n        //\"getUTCDay\" lo que hace es retornarnos los dias en numeros de el 0 al 6 donde 0 es domingo\r\n        const dia = new Date(e.target.value).getUTCDay(); // esto ya nos va a permitir tener acceso a las funciones de fecha\r\n\r\n        if ([0, 6].includes(dia)) { // si selecciona un domingo o sabado de la const dia entonces no es valido\r\n            // console.log('seleccionaste domingo lo cual no es valido')\r\n            e.preventDefault(); // esto es para prevenir la accion que se esta haciendo, por que si no, se muestra como error pero no se elimina la fecha\r\n            fechaInput.value = '', // esto es para digamos que resetear el valor a nada\r\n            mostrarAlerta('Fines de Semana no son permitidos', 'error'); // se le pasa el segundo parametro para decirle que es de tipo error\r\n        }else { // de lo contrario si es valido\r\n            // console.log('dia valido')\r\n\r\n            cita.fecha = fechaInput.value;  // si es valido entonces esto para que se agregue. \r\n            console.log(cita)\r\n        }\r\n\r\n\r\n\r\n        // -.-----esto a continuacion es para que nos de solo los valores que queremos-------\r\n        // y \"toLocaleDateString\" es para cambiar a español cada una de las opciones que estoy definiendo de la fecha\r\n        // const opciones = {\r\n        //     weekday: 'long',\r\n        //     year: 'numeric',\r\n        //     month: 'long'\r\n        // }\r\n\r\n        // console.log(dia.toLocaleDateString('es-ES', opciones))\r\n    })    \r\n}\r\n\r\n// creando la funcion para que no se muestren dias pasados en la fecha\r\n\r\nfunction deshabilitarFechaAnterior() {\r\n    const inputFecha = document.querySelector('#fecha');\r\n\r\n    const fechaAhora = new Date(); // esto hace que veas la fecha actual\r\n    const year = fechaAhora.getFullYear();\r\n    const mes = fechaAhora.getMonth() + 1; // se le suma uno por que en los meses en JS va de 0 a 11\r\n    const dia = fechaAhora.getDate() + 1; // para que el cliente no pueda agendar cita para el mismo dia, si no que a partir de el dia siguiente\r\n\r\n    // Formato deseado: AAAA-MM-DD\r\n\r\n    const fechaDeshabilitar = `${year}-${mes < 10 ? `0${mes}` : mes}-${dia}`;\r\n    // el año, el mes de ser menor a 10 muestrame el mes como 01,02,02,04.... si es mayor o igual que 10 entonces muestrame solo el mes que seria 10, 11, 12\r\n\r\n    inputFecha.min = fechaDeshabilitar;  // el min es para que ese sea el valor minimo que se puede mostrar\r\n\r\n    // console.log(fechaDeshabilitar); // ver la fecha\r\n    // console.log(fechaAhora.getUTCFullYear()); // ver el año actual\r\n    // console.log(fechaAhora.getDate());  // ver dia en nombre\r\n    // console.log(fechaAhora.getDay());  // para ver el dia en numero del 0 al 6 donde 0 es domingo\r\n    // console.log(fechaAhora.getMonth()); // ver mes.. donde el mes 0 es enero\r\n}\r\n\r\n\r\n// definiendo la funcion de horaCita\r\nfunction horaCita() {\r\n    const inputHora = document.querySelector('#hora');\r\n    inputHora.addEventListener('input', (e)=> { // le pasamos el evento\r\n        console.log(e.target.value)\r\n\r\n        const horaCita = e.target.value\r\n        const hora = horaCita.split(':') // split me va a permitir que va a evauar el estring y podemos buscar una letra o un espacio y cuando a encuetre la va a dividir.. por ejemplo si se le coloca \":\" cuando lo encuentre ahi es donde la divide en un arreglo donde el primer valor toma la posicion de creo y la segunda posicion toma el valor de 1\r\n        \r\n        if ( hora[0] < 10 || hora[0] > 18 ) {\r\n\r\n            mostrarAlerta('Hora no valida', 'error');\r\n\r\n            setTimeout(() => { // para que se vea mejor\r\n                \r\n                inputHora.value= '';  // para que al no ser valido se reinicie el valor a un string vacio\r\n                \r\n            }, 1000);\r\n            // console.log('hora no valida');\r\n\r\n        } else {\r\n\r\n            cita.hora = horaCita;\r\n            // console.log('hora valida')\r\n        }\r\n        \r\n        \r\n        // console.log(hora)\r\n    })\r\n}"]}